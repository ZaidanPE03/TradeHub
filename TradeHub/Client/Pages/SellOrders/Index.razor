@page "/sellorders"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using TradeHub.Client.Components


<h3 class="card-title"> SellOrder Page</h3>
<br />
<a href="/sellorders/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	New Listing
</a>
<br />


@if (SellOrders == null)
{
    <div class="alert alert-info">Loading SellOrder data... </div>
}

else
{
	<table class="table table-responsive">
		<thead>
			<tr>
				<th>Product Name</th>
				<th>Trade Date</th>
				<th>Trade Time</th>
				<th>Delivery Mode</th>
				<th>Created By</th>

			</tr>
		</thead>

		<tbody>
			@foreach (var sellorder in SellOrders)
			{
				<tr>
					<td>@GetProductNameById(sellorder.ProductId)</td>
					<td>@sellorder.SellDate</td>
					<td>@sellorder.SellTime</td>
					<td>@sellorder.DeliveryMode</td>
					<td>@GetCustNameById(sellorder.CustomerId)</td>
					

					<td>

						<a href="/sellorders/view/@sellorder.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>

						<a href="/sellorders/edit/@sellorder.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>

						<button class="btn btn-danger" @onclick="@(()=>Delete(sellorder.Id))">
							<span class="oi oi-delete"></span>

						</button>
					</td>

				</tr>
			}
		</tbody>
	</table>

}


 
@code 
{
    private List<SellOrder>? SellOrders;
	private List<Product>? Products;
	private List<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        SellOrders = await _client.GetFromJsonAsync<List<SellOrder>>($"{Endpoints.SellOrdersEndpoint}");
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

	private string GetProductNameById(int? productId)
	{
		var product = Products?.FirstOrDefault(p => p.Id == productId);

		return product != null ? product.Name : "Product Not Found";
	}

	private string GetCustNameById(int? customerId)
	{
		var customer = Customers?.FirstOrDefault(p => p.Id == customerId);

		return customer != null ? customer.Name : "Customer Not Found";
	}

	async Task Delete(int sellorderId)
	{
		if (SellOrders != null)
		{
			var sellorder = SellOrders.First(q => q.Id == sellorderId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{sellorderId}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.SellOrdersEndpoint}/{sellorderId}");
				await OnInitializedAsync();
			}
		}
	}

}
