@page "/sellorders"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using TradeHub.Client.Components


<h3 class="card-title"> SellOrder Page</h3>
<br />


@if (SellOrders == null)
{
    <div class="alert alert-info">Loading SellOrder data... </div>
}

else
{
	<table class="table table-responsive">
		<thead>
			<tr>
				<th>Trade Date</th>
				<th>Trade Time</th>
				<th>Delivery Mode</th>

			</tr>
		</thead>

		<tbody>
			@foreach (var sellorder in SellOrders)
			{
				<tr>
					<td>@sellorder.SellDate</td>
					<td>@sellorder.SellTime</td>
					<td>@sellorder.DeliveryMode</td>
					

					<td>

						<a href="/sellorders/view/@sellorder.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>

						<a href="/sellorders/edit/@sellorder.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>

						<button class="btn btn-danger" @onclick="@(()=>Delete(sellorder.Id))">
							<span class="oi oi-delete"></span>

						</button>
					</td>

				</tr>
			}
		</tbody>
	</table>

}


 
@code 
{
    private List<SellOrder>? SellOrders;

    protected async override Task OnInitializedAsync()
    {
        SellOrders = await _client.GetFromJsonAsync<List<SellOrder>>($"{Endpoints.SellOrdersEndpoint}");
    }

    async Task Delete(int sellorderId)
    {
        if (SellOrders != null)
        {
            var sellorder = SellOrders.First(q => q.Id == sellorderId);
            var confirm = await js.InvokeAsync<bool>("Confirm", $"Do you want to delete {sellorder.Id}?");

            if(confirm)
            {
                await _client.DeleteAsync($"{Endpoints.SellOrdersEndpoint}/{sellorderId}");
                await OnInitializedAsync();
            }

        }
    }

}
