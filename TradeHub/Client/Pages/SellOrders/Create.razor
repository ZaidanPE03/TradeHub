@page "/sellorders/create"
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title"> Create New SellOrder</h3>
<hr />
<br />

<EditForm Model="@sellorder" OnValidSubmit="CreateSellOrder">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class=" form-group">
		<label>Product Name: </label>
		<div>
			<InputSelect @bind-Value="sellorder.ProductId" class="form-control">
			<option value=""> --Select Product-- </option>
			@if (Products != null)
			{
				foreach (var product in Products)
				{
					<option value ="@product.Id">@product.Name</option>
				}
			}
		</InputSelect>
		<ValidationMessage For="@(() => sellorder.ProductId)" />
		</div>
	</div>

	<br />
	<div class=" form-group">
		<label>Customer Name: </label>
		<div>
			<InputSelect @bind-Value="sellorder.CustomerId" class="form-control">
				<option value=""> --Select Customer-- </option>
				@if (Customers != null)
				{
					foreach (var customer in Customers)
					{
						<option value="@customer.Id">@customer.Name</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => sellorder.CustomerId)" />
		</div>
	</div>
	<br />
	<div class=" form-group">
		<label>Delivery Mode: </label>
		<div>
			<InputSelect @bind-Value="sellorder.DeliveryMode" class="form-control">
				<option value=""> --Select Delivery Mode-- </option>
				<option value="Standard">Standard</option>
				<option value="Express">Express</option>
			</InputSelect>
			<ValidationMessage For="@(() => sellorder.DeliveryMode)" />
		</div>
	</div>
	<br />
	<div class=" form-group">
		<label>Date: </label>
		<div>
			<InputDate @bind-Value="sellorder.SellDate" class="form-control">
			</InputDate>
			<ValidationMessage For="@(() => sellorder.SellDate)" />
		</div>
	</div>
	
	
	<br />
	<button type="submit" class="btn btn-success btn-block">
		Create Listing
	</button>
	<br />
	<BackToList Target="staffs" />
</EditForm>

@code
{
	SellOrder sellorder = new SellOrder()

		{
			SellDate = DateTime.Today
		};

	private IList<Product>? Products;
	private IList<Customer>? Customers;

	protected async override Task OnInitializedAsync()
	{
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
	}

	private async Task CreateSellOrder()
	{
		await _client.PostAsJsonAsync(Endpoints.SellOrdersEndpoint, sellorder);
		_navManager.NavigateTo("/sellorders");
	}

}