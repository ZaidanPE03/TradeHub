@page "/tradeorders"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using TradeHub.Client.Components


<h3 class="card-title"> TradeOrder Page</h3>
<br />
<a href="/tradeorders/create" class="btn btn-secondary">
	<span class="oi oi-plus"></span>
	New Listing
</a>
<br />

@if (TradeOrders == null)
{
    <div class="alert alert-info">Loading TradeOrder data... </div>
}

else
{
	<table class="table table-responsive">
		<thead>
			<tr>
				<th>Product Name</th>
				<th>Trade Date</th>
				<th>Delivery Mode</th>

			</tr>
		</thead>

		<tbody>
			@foreach (var tradeorder in TradeOrders)
			{
				<tr>
					<td>@GetProductName(tradeorder.SellOrder.ProductId)</td>
					<td>@tradeorder.SellOrder.SellDate</td>
					<td>@tradeorder.SellOrder.DeliveryMode</td>
					

					<td>

						<a href="/tradeorders/view/@tradeorder.Id" class="btn btn-primary">
							<span class="oi oi-book"></span>
						</a>

						<a href="/tradeorders/edit/@tradeorder.Id" class="btn btn-warning">
							<span class="oi oi-pencil"></span>
						</a>

						<button class="btn btn-danger" @onclick="@(()=>Delete(tradeorder.Id))">
							<span class="oi oi-delete"></span>

						</button>
					</td>

				</tr>
			}
		</tbody>
	</table>

}

 
@code 
{
    private List<TradeOrder>? TradeOrders;

	private List<Product>? Products;

    protected async override Task OnInitializedAsync()
    {
        TradeOrders = await _client.GetFromJsonAsync<List<TradeOrder>>($"{Endpoints.TradeOrdersEndpoint}");
		Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
    }

	private string GetProductName(int? productId)
	{
		var product = Products?.FirstOrDefault(p => p.Id == productId);

		return product != null ? product.Name : "Product Not Found";
	}

	async Task Delete(int tradeorderId)
	{
		if (TradeOrders != null)
		{
			var tradeorder = TradeOrders.First(q => q.Id == tradeorderId);
			var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete{tradeorderId}?");

			if (confirm)
			{
				await _client.DeleteAsync($"{Endpoints.TradeOrdersEndpoint}/{tradeorderId}");
				await OnInitializedAsync();
			}
		}
	}

}
